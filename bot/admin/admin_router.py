import asyncio
from html import escape

from aiogram import Router, F, Bot
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.exc import IntegrityError
from sqlalchemy.ext.asyncio import AsyncSession

from bot.admin.kbs import admin_kb, faq_kb, faq_category_menu_kb, accept_decline_kb
from bot.admin.schemas import FaqModel, FaqQuestionFindModel, QuestionModel
from bot.config import settings
from bot.dao.dao import FAQCategoryDAO, FAQQuestionDAO, UserDAO
from bot.admin.kbs import cancel_kb
from bot.user.kbs import yes_no_kb

admin_router = Router()


class FaqThemeState(StatesGroup):
    set_name = State()

@admin_router.callback_query(F.data == "admin_panel", F.from_user.id.in_(settings.ADMIN_IDS))
async def start_admin(call: CallbackQuery):
    await call.message.edit_text(text="–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup=admin_kb())

@admin_router.callback_query(F.data == "menu_faq_category", F.from_user.id.in_(settings.ADMIN_IDS))
async def faq_list(call: CallbackQuery,session_without_commit: AsyncSession):
    faq_categories = await FAQCategoryDAO(session_without_commit).find_all()
    await call.message.edit_text(text="‚öôÔ∏è–†–∞–±–æ—Ç–∞ —Å FAQ-–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏‚öôÔ∏è",reply_markup=faq_kb(faq_categories))

@admin_router.callback_query(F.data.startswith("menu_faq_category_"),F.from_user.id.in_(settings.ADMIN_IDS))
async def faq_menu(call: CallbackQuery, session_without_commit:AsyncSession):
    faq_dao = FAQCategoryDAO(session_without_commit)
    faq_id= int(call.data.split("_")[-1])
    faq_theme = await faq_dao.find_one_or_none_by_id(faq_id)
    if not faq_theme:
        await call.message.edit_text(text="‚ùå–î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",reply_markup=admin_kb())
    await call.message.edit_text(f'‚öôÔ∏è–†–∞–±–æ—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "{faq_theme.name}"‚öôÔ∏è',
                                 reply_markup=faq_category_menu_kb(faq_id))

@admin_router.callback_query(F.data == "add_faq_category", F.from_user.id.in_(settings.ADMIN_IDS))
async def add_faq(call: CallbackQuery,state: FSMContext):
    await call.message.edit_text(text=f"‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤‚úçÔ∏è",reply_markup=cancel_kb())
    await state.set_state(FaqThemeState.set_name)

@admin_router.message(FaqThemeState.set_name, F.from_user.id.in_(settings.ADMIN_IDS))
async def add_faq_category(message: Message,state: FSMContext):
    faq_category_name = escape(message.text)
    await state.update_data(name=faq_category_name)
    await message.answer(text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É: {faq_category_name}?",
                              reply_markup=accept_decline_kb("add_faq"))

@admin_router.callback_query(F.data == "add_faq_y", F.from_user.id.in_(settings.ADMIN_IDS))
async def add_faq_category_finally(call: CallbackQuery,session_with_commit: AsyncSession,state: FSMContext):
    data = await state.get_data()
    try:
        faq_dao = FAQCategoryDAO(session_with_commit)
        new_theme = await faq_dao.add(FaqModel(**data))

        if new_theme:
            await call.message.edit_text(
                text="‚úÖ –ù–æ–≤–∞—è —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                reply_markup=admin_kb()
            )
    except IntegrityError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await call.message.edit_text(
            text="‚ùå –¢–µ–º–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=admin_kb()
        )
        await session_with_commit.rollback()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        await call.message.edit_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã",
            reply_markup=admin_kb()
        )

    finally:
        await state.clear()

@admin_router.callback_query(F.data.startswith("d_faq_"), F.from_user.id.in_(settings.ADMIN_IDS))
async def remove_faq_theme(call: CallbackQuery,session_without_commit: AsyncSession,state: FSMContext):
    faq_dao = FAQCategoryDAO(session_without_commit)
    faq_id = int(call.data.split("_")[-1])
    faq_theme = await faq_dao.find_one_or_none_by_id(faq_id)
    if not faq_theme:
        await call.message.edit_text(text="‚ùå–î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=admin_kb())
    await call.message.edit_text(text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É: {faq_theme.name}?\n"
                                      f"<b>–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –Ω–µ—ë –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.</b>",
                                 reply_markup=accept_decline_kb(f"remove_theme_{faq_theme.id}"))



@admin_router.callback_query(F.data.startswith("remove_theme_"), F.from_user.id.in_(settings.ADMIN_IDS))
async def remove_faq_theme_finally(call: CallbackQuery,session_with_commit: AsyncSession):
    faq_theme_id=int(call.data.split("_")[-2])
    faq_dao = FAQCategoryDAO(session_with_commit)
    try:
        theme = await faq_dao.find_one_or_none_by_id(faq_theme_id)

        if not theme:
            await call.message.edit_text(
                text="‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                reply_markup=admin_kb()
            )
            return

        await session_with_commit.delete(theme)
        await session_with_commit.commit()

        await call.message.edit_text(
            text="‚úÖ –¢–µ–º–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=admin_kb()
        )

    except IntegrityError as e:
        await session_with_commit.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã {faq_theme_id}: {e}")
        await call.message.edit_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)",
            reply_markup=admin_kb()
        )

    except Exception as e:
        await session_with_commit.rollback()
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã {faq_theme_id}: {e}")
        await call.message.edit_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
            reply_markup=admin_kb()
        )


@admin_router.callback_query(F.data.startswith("f_q_menu_"), F.from_user.id.in_(settings.ADMIN_IDS))
async def send_questions(call: CallbackQuery,session_without_commit: AsyncSession):
    quesions_dao = FAQQuestionDAO(session_without_commit)
    faq_id = int(call.data.split("f_q_menu_")[-1])
    questions = await quesions_dao.find_all(filters=FaqQuestionFindModel(category_id=faq_id))
    if not questions:
        await call.message.edit_text(f"‚ùå–í –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã",reply_markup=admin_kb())
    await call.message.edit_text("‚öôÔ∏è–°–µ–π—á–∞—Å –≤–∞–º –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ")
    for question in questions:
        if question.file_id:
            if question.file_type == "photo":
                await call.message.answer_photo(
                    photo=question.file_id,
                    caption=f"‚ùì –í–æ–ø—Ä–æ—Å: {question.question_text}\n\nüí° –û—Ç–≤–µ—Ç: {question.answer_text}\n\n<b>–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
                            f" —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?</b>",
                    reply_markup=accept_decline_kb(f"dq_{question.id}")
                )
            elif question.file_type == "document":
                await call.message.answer_document(
                    document=question.file_id,
                    caption=f"‚ùì –í–æ–ø—Ä–æ—Å: {question.question_text}\n\nüí° –û—Ç–≤–µ—Ç: {question.answer_text}\n\n<b>–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
                            f" —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?</b>",
                    reply_markup=accept_decline_kb(f"dq_{question.id}")
                )
        else:
            await call.message.answer(
                text=f"‚ùì –í–æ–ø—Ä–æ—Å: {question.question_text}\n\nüí° –û—Ç–≤–µ—Ç: {question.answer_text}\n\n<b>–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"
                            f" —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?</b>",
                reply_markup=accept_decline_kb(f"dq_{question.id}")
            )

@admin_router.callback_query(F.data.startswith("dq_"), F.from_user.id.in_(settings.ADMIN_IDS))
async def delete_question_by_id(call: CallbackQuery,session_with_commit: AsyncSession):
    quesions_dao = FAQQuestionDAO(session_with_commit)
    question_id = int(call.data.split("_")[-2])
    question = await quesions_dao.delete(filters=QuestionModel(id=question_id))
    await call.message.answer("‚úÖ–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!‚úÖ",reply_markup=admin_kb())


class MassSendState(StatesGroup):
    waiting_for_content = State()


@admin_router.callback_query(F.data == "send_for_all", F.from_user.id.in_(settings.ADMIN_IDS))
async def start_mass_send(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text="üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF/DOCX) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_kb()
    )
    await state.set_state(MassSendState.waiting_for_content)


async def send_chunk(bot: Bot, users_chunk: list, content: dict, semaphore: asyncio.Semaphore):
    async with semaphore:
        tasks = []
        for user in users_chunk:
            task = asyncio.create_task(send_to_user(bot, user.telegram_id, content))
            tasks.append(task)
        return await asyncio.gather(*tasks, return_exceptions=True)


async def send_to_user(bot: Bot, chat_id: int, content: dict):
    try:
        if content['type'] == 'text':
            await bot.send_message(
                chat_id=chat_id,
                text=content['text'],
                parse_mode=ParseMode.HTML
            )
        elif content['type'] == 'photo':
            if content.get('caption'):
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=content['file_id'],
                    caption=content['caption'],
                    parse_mode=ParseMode.HTML
                )
            else:
                await bot.send_photo(chat_id=chat_id, photo=content['file_id'])
        elif content['type'] == 'document':
            if content.get('caption'):
                await bot.send_document(
                    chat_id=chat_id,
                    document=content['file_id'],
                    caption=content['caption'],
                    parse_mode=ParseMode.HTML
                )
            else:
                await bot.send_document(chat_id=chat_id, document=content['file_id'])
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False


@admin_router.message(StateFilter(MassSendState.waiting_for_content))
async def process_mass_send(message: Message, state: FSMContext, bot: Bot, session_without_commit: AsyncSession):
    user_dao = UserDAO(session_without_commit)
    users = await user_dao.find_all()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content = {'type': 'text', 'text': message.text}

    if message.photo:
        content = {
            'type': 'photo',
            'file_id': message.photo[-1].file_id,
            'caption': message.caption
        }
    elif message.document:
        if message.document.mime_type in (
        'application/pdf', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'):
            content = {
                'type': 'document',
                'file_id': message.document.file_id,
                'caption': message.caption
            }
        else:
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
            return

    # –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    CHUNK_SIZE = 30  # –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    MAX_CONCURRENT = 5  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—á–µ–∫
    semaphore = asyncio.Semaphore(MAX_CONCURRENT)

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–∞—á–∫–∏
    user_chunks = [users[i:i + CHUNK_SIZE] for i in range(0, len(users), CHUNK_SIZE)]

    success = 0
    failed = 0
    processed = 0

    for i, chunk in enumerate(user_chunks, 1):
        results = await send_chunk(bot, chunk, content, semaphore)
        chunk_success = sum(1 for r in results if r is True)
        success += chunk_success
        failed += len(chunk) - chunk_success
        processed += len(chunk)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –ø–∞—á–µ–∫
        if i % 5 == 0 or i == len(user_chunks):
            try:
                await status_msg.edit_text(
                    f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(users)}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
                    f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
                    f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {int(processed / len(users) * 100)}%"
                )
            except:
                pass

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await status_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
        f"‚Ä¢ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content['type']}"
    )
    await state.clear()