import re

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

from bot.dao.dao import UserDAO
from bot.user.kbs import profile_kb, cancel_kb, skip_kb, main_user_kb
from bot.user.schemas import TelegramIDModel, UpdateUserModel
from bot.user.utils import process_dell_text_msg

profile_router = Router()


class EditProfileData(StatesGroup):
    change_name = State()
    change_phone = State()
    change_email = State()


@profile_router.callback_query(F.data == "my_profile")
async def page_profile(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")
    try:
        user_dao = UserDAO(session_without_commit)
        user_info = await user_dao.find_one_or_none(filters=TelegramIDModel(telegram_id=call.from_user.id))
        text = (
            f"üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚ú®<b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> {user_info.fio if user_info.fio else 'ü•∑ —É–∫–∞–∑–∞–Ω–æ ü•∑'}\n"
            f"üì±<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info.phone if user_info.phone else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}\n"
            f"üìß<b>Email:</b> {user_info.email if user_info.email else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}"
        )
        await call.message.edit_text(
            text=text, reply_markup=profile_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_profile: {e}")
        await call.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@profile_router.callback_query(F.data == "edit_profile")
async def start_edit_profile(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    msg = await call.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–§–∞–º–∏–ª–∏—é –∏(–∏–ª–∏) –∏–º—è:",
        reply_markup=cancel_kb()
    )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(EditProfileData.change_name)


@profile_router.message(StateFilter(EditProfileData.change_name), F.text)
async def process_set_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await process_dell_text_msg(message, state)
        await state.clear()
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:",reply_markup=cancel_kb())
        return
    await state.update_data(fio=name)
    await process_dell_text_msg(message, state)

    msg = await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å 9",
        reply_markup=cancel_kb()
    )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(EditProfileData.change_phone)


@profile_router.message(StateFilter(EditProfileData.change_phone), F.text)
async def process_set_phone(message: Message, state: FSMContext):
    raw_phone = message.text.strip()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cleaned_phone = re.sub(r'\D', '', raw_phone)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if cleaned_phone.startswith('8') and len(cleaned_phone) == 11:
        formatted_phone = '+7' + cleaned_phone[1:]
    elif cleaned_phone.startswith('7') and len(cleaned_phone) == 11:
        formatted_phone = '+' + cleaned_phone
    elif cleaned_phone.startswith('9') and len(cleaned_phone) == 10:
        formatted_phone = '+7' + cleaned_phone
    else:
        await process_dell_text_msg(message, state)
        await state.clear()
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: 89629136040",
                             reply_markup=cancel_kb())
        return



    await state.update_data(phone=formatted_phone)
    await process_dell_text_msg(message, state)

    msg = await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=skip_kb()
    )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(EditProfileData.change_email)


@profile_router.message(StateFilter(EditProfileData.change_email))
async def process_set_email_and_confirm(message: Message, state: FSMContext, session_with_commit: AsyncSession):
    email = None if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text.strip()
    await state.update_data(email=email)
    await process_dell_text_msg(message, state)
    data = await state.get_data()
    del data["last_msg_id"]
    user_dao = UserDAO(session_with_commit)
    try:
        user = await user_dao.update(filters=TelegramIDModel(telegram_id=message.from_user.id),
                                     values=UpdateUserModel(**data))
        if not user:
            raise Exception
        response = [
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:",
        ]

        await message.answer(
            "\n".join(response),
            reply_markup=main_user_kb(message.from_user.id)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=main_user_kb(message.from_user.id)
        )
    finally:
        await state.clear()
