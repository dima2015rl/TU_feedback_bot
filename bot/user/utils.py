from html import escape

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

from bot.admin.kbs import answer_kb
from bot.config import bot, settings
from bot.dao.dao import CustomQuestionDAO, UserDAO
from bot.user.kbs import faq_kb
from bot.user.schemas import TelegramIDModel, CreateCustomQuestionModel


async def process_dell_text_msg(message: Message, state: FSMContext):
    data = await state.get_data()
    last_msg_id = data.get('last_msg_id')
    try:
        if last_msg_id:
            await bot.delete_message(chat_id=message.from_user.id, message_id=last_msg_id)
        else:
            logger.warning("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await message.delete()

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")


async def _save_question(
        message: Message,
        session_with_commit: AsyncSession,
        is_anonymous: bool
):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
    try:
        user_dao = UserDAO(session_with_commit)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_dao.find_one_or_none(
            filters=TelegramIDModel(telegram_id=message.from_user.id))
        if not user and not is_anonymous:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=faq_kb([]))
        question_dao = CustomQuestionDAO(session_with_commit)
        new_question = await question_dao.add(
            CreateCustomQuestionModel(
                question_text=escape(message.text),
                is_anonymous=is_anonymous,
                user_id=user.id if user else None
            )
        )
        if is_anonymous:
            admin_text = (
                "‚ùì <b>–ù–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
                f"üìÑ <b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>\n{escape(message.text)}"
            )
        else:

            admin_text = (
                "‚ùì <b>–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
                f"‚ú® <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {escape(user.fio) if user.fio else '‚Äî'}\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href='tel:{user.phone}'>{user.phone}</a>\n"
                f"üìß <b>Email:</b> {escape(user.email) if user.email else '‚Äî'}\n"
                f"üìÑ <b>–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:</b>\n{escape(message.text)}"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
        for admin_id in settings.ADMIN_IDS:
            try:
                await message.bot.send_message(
                    chat_id=admin_id,
                    text=admin_text,
                    reply_markup=answer_kb(new_question.id),
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            reply_markup=faq_kb([])
        )

        return new_question

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=faq_kb([])
        )
        return None