from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession
from bot.dao.dao import UserDAO
from bot.user.kbs import main_user_kb, profile_kb
from bot.user.schemas import TelegramIDModel, UserModel

user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    try:
        user_dao = UserDAO(session_with_commit)
        user_info = await user_dao.find_one_or_none(
            filters=TelegramIDModel(telegram_id=message.from_user.id)
        )
        text = ("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—É—á–µ–Ω–∏–∏ –≤ –¢–£ –∏–º. –ê.–ê. –õ–µ–æ–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ "
                "–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª, –∏–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª. üòâ")
        if not user_info:
            new_user = UserModel(
                telegram_id=message.from_user.id,
                #username=message.from_user.username,
                fio=f"{"" if message.from_user.full_name is None else message.from_user.full_name}",

            )

            await user_dao.add(new_user)
            await message.answer(text="üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"+text,reply_markup=main_user_kb(user_id))
        else:
            await message.answer("üëãüèª –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"+text, reply_markup=main_user_kb(user_id))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@user_router.callback_query(F.data == "home")
async def page_home(call: CallbackQuery):
    await call.answer("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    text = ("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—É—á–µ–Ω–∏–∏ –≤ –¢–£ –∏–º. –ê.–ê. –õ–µ–æ–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ "
            "–∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª, –∏–ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã¬ª. üòâ")
    return await call.message.edit_text(
        f"üëãüèª –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n {text}",
        reply_markup=main_user_kb(call.from_user.id)
    )

@user_router.callback_query(F.data == "my_profile")
async def page_about(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer("–ü—Ä–æ—Ñ–∏–ª—å")
    try:
        user_dao = UserDAO(session_without_commit)
        user_info = await user_dao.find_one_or_none(filters=TelegramIDModel(telegram_id=call.from_user.id))
        text = (
            f"üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚ú®<b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> {user_info.fio if user_info.fio else 'ü•∑ —É–∫–∞–∑–∞–Ω–æ ü•∑'}\n"
            f"üì±<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_info.phone if user_info.phone else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}\n"
            f"üìß<b>Email:</b> {user_info.email if user_info.email else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}"
        )
        await call.message.edit_text(
            text=text, reply_markup=profile_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_profile: {e}")
        await call.answer("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
