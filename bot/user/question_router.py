from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

from bot.admin.kbs import answer_kb
from bot.config import settings
from bot.dao.dao import UserDAO, CustomQuestionDAO
from bot.user.kbs import cancel_kb, personal_question_kb, faq_kb, yes_no_kb
from bot.user.schemas import TelegramIDModel, CreateCustomQuestionModel
from bot.user.utils import _save_question

question_router = Router()


@question_router.callback_query(F.data == "ask_question")
async def page_ask(call: CallbackQuery):
    await call.answer("–ú–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    return await call.message.edit_text(
        f"üëã–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å?",
        reply_markup=personal_question_kb()
    )


@question_router.callback_query(F.data == "question_named")
async def page_question_named(call: CallbackQuery,session_without_commit: AsyncSession):
    await call.answer("–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    try:
        user_dao = UserDAO(session_without_commit)
        user = await user_dao.find_one_or_none(filters=TelegramIDModel(telegram_id=call.from_user.id))
        if user is None:
            return await call.message.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=faq_kb([])
            )
        if user.phone is None:
            return await call.message.edit_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                reply_markup=faq_kb([])
            )
        text = (
            f"‚úçÔ∏è <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
            f"üë§<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
            f"‚ú®<b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> {user.fio if user.fio else 'ü•∑ —É–∫–∞–∑–∞–Ω–æ ü•∑'}\n"
            f"üì±<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user.phone if user.phone else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}\n"
            f"üìß<b>Email:</b> {user.email if user.email else 'ü•∑ –Ω–µ —É–∫–∞–∑–∞–Ω ü•∑'}\n"
            f"‚ùó–î–ª—è –≤–æ–ø—Ä–æ—Å–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. <b>–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?</b>"
        )
        await call.message.edit_text(
            text=text, reply_markup=yes_no_kb())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await call.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=faq_kb([])
        )


@question_router.callback_query(F.data == "confirm_yes")
async def personal_question_request(call: CallbackQuery, state: FSMContext):
    await call.answer("–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    await call.message.edit_text(
        text="‚úçÔ∏è <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
             "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç. ", reply_markup=cancel_kb()
    )
    await state.set_state("waiting_for_personal_question")


@question_router.callback_query(F.data == "question_anon")
async def anonymous_question_request(call: CallbackQuery, state: FSMContext):
    await call.answer("–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
    await call.message.edit_text(
        text="‚úçÔ∏è <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å</b>\n\n"
             "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ—Ç —á–∞—Ç. "
             "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –µ–≥–æ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",reply_markup=cancel_kb()
    )
    await state.set_state("waiting_for_question")


@question_router.message(StateFilter("waiting_for_personal_question"))
async def save_personal_question(message: Message, state: FSMContext, session_with_commit: AsyncSession):
    await _save_question(message, session_with_commit, is_anonymous=False)
    await state.clear()

@question_router.message(StateFilter("waiting_for_question"))
async def save_anonymous_question(message: Message, state: FSMContext, session_with_commit: AsyncSession):
        await _save_question(message, session_with_commit, is_anonymous=True)
        await state.clear()


